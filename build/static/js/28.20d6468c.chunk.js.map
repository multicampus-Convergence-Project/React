{"version":3,"sources":["../node_modules/@aws-amplify/ui-components/dist/esm-es5/amplify-form-field_4.entry.js"],"names":["__webpack_require__","r","__webpack_exports__","d","AmplifyFormField","AmplifyHint","AmplifyInput","AmplifyLabel","_index_39969785_js__WEBPACK_IMPORTED_MODULE_0__","hostRef","Object","this","type","required","placeholder","prototype","render","class","label","htmlFor","fieldId","description","id","data-test","name","handleInputChange","value","inputProps","disabled","hint","style","formSubmit","handleKeyDown","ev","key","emit","_this","assign","aria-describedby","onInput","event"],"mappings":"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","file":"static/js/28.20d6468c.chunk.js","sourcesContent":["import { r as registerInstance, h, c as createEvent, H as Host } from './index-39969785.js';\nvar amplifyFormFieldCss = \":host{--label-font-size:var(--amplify-text-md);--description-font-size:var(--amplify-text-sm)}.form-field{margin-bottom:15px}.form-field-label{display:block;font-size:var(--label-font-size);padding-bottom:0.5em}.form-field-description{font-size:var(--description-font-size);padding-top:0.5em}\";\n\nvar AmplifyFormField =\n/** @class */\nfunction () {\n  function AmplifyFormField(hostRef) {\n    registerInstance(this, hostRef);\n    /** The input type.  Can be any HTML input type. */\n\n    this.type = 'text';\n    /** The required flag in order to make an input required prior to submitting a form */\n\n    this.required = false;\n    /** (Optional) The placeholder for the input element.  Using hints is recommended, but placeholders can also be useful to convey information to users. */\n\n    this.placeholder = '';\n  }\n\n  AmplifyFormField.prototype.render = function () {\n    return h(\"div\", {\n      class: \"form-field\"\n    }, this.label && h(\"div\", {\n      class: \"form-field-label\"\n    }, h(\"amplify-label\", {\n      htmlFor: this.fieldId\n    }, this.label)), this.description && h(\"div\", {\n      id: this.fieldId + \"-description\",\n      class: \"form-field-description\",\n      \"data-test\": \"form-field-description\"\n    }, this.description), h(\"div\", null, h(\"slot\", {\n      name: \"input\"\n    }, h(\"amplify-input\", {\n      fieldId: this.fieldId,\n      description: this.description,\n      type: this.type,\n      handleInputChange: this.handleInputChange,\n      placeholder: this.placeholder,\n      name: this.name,\n      value: this.value,\n      inputProps: this.inputProps,\n      disabled: this.disabled\n    }))), this.hint && h(\"amplify-hint\", {\n      id: this.fieldId + \"-hint\"\n    }, this.hint));\n  };\n\n  return AmplifyFormField;\n}();\n\nAmplifyFormField.style = amplifyFormFieldCss;\nvar amplifyHintCss = \":host{--color:var(--amplify-grey);--font-family:var(--amplify-font-family);--font-size:var(--amplify-text-xs);--font-weight:var(--amplify-font-weight)}.hint{color:var(--color);font-family:var(--font-family);font-weight:var(--font-weight);font-size:var(--font-size);margin-bottom:2.625rem}\";\n\nvar AmplifyHint =\n/** @class */\nfunction () {\n  function AmplifyHint(hostRef) {\n    registerInstance(this, hostRef);\n  }\n\n  AmplifyHint.prototype.render = function () {\n    return h(\"div\", {\n      class: \"hint\"\n    }, h(\"slot\", null));\n  };\n\n  return AmplifyHint;\n}();\n\nAmplifyHint.style = amplifyHintCss;\nvar amplifyInputCss = \":host{--color:var(--amplify-secondary-color);--background-color:var(--amplify-secondary-contrast);--border-color:var(--amplify-light-grey);--border-color-focus:var(--amplify-primary-color);--border:1px solid var(--border-color);--margin:0 0 0.625rem 0}.input-host{width:100%}.input{display:block;width:100%;padding:1rem;font-size:var(--amplify-text-sm);color:var(--color);background-color:var(--background-color);background-image:none;border:var(--border);border-radius:3px;-webkit-box-sizing:border-box;box-sizing:border-box;margin:var(--margin);height:3.125rem;line-height:1.1}.input:focus{outline:none;border-color:var(--border-color-focus)}.input:disabled{opacity:0.5}\";\n\nvar AmplifyInput =\n/** @class */\nfunction () {\n  function AmplifyInput(hostRef) {\n    registerInstance(this, hostRef);\n    /** The input type.  Can be any HTML input type. */\n\n    this.type = 'text';\n    /** The callback, called when the input is modified by the user. */\n\n    this.handleInputChange = function () {\n      return void 0;\n    };\n    /** (Optional) The placeholder for the input element.  Using hints is recommended, but placeholders can also be useful to convey information to users. */\n\n\n    this.placeholder = '';\n    this.formSubmit = createEvent(this, \"formSubmit\", 7);\n  } // eslint-disable-next-line\n\n\n  AmplifyInput.prototype.handleKeyDown = function (ev) {\n    if (ev.key === 'Enter') {\n      this.formSubmit.emit(ev);\n    }\n  };\n\n  AmplifyInput.prototype.render = function () {\n    var _this = this;\n\n    return h(Host, {\n      class: \"input-host\"\n    }, h(\"input\", Object.assign({\n      id: this.fieldId,\n      \"aria-describedby\": this.fieldId && this.description ? this.fieldId + \"-description\" : null,\n      type: this.type,\n      onInput: function onInput(event) {\n        return _this.handleInputChange(event);\n      },\n      placeholder: this.placeholder,\n      name: this.name,\n      class: \"input\",\n      value: this.value,\n      disabled: this.disabled\n    }, this.inputProps)));\n  };\n\n  return AmplifyInput;\n}();\n\nAmplifyInput.style = amplifyInputCss;\nvar amplifyLabelCss = \":host{--label-color:var(--amplify-secondary-color)}.label{color:var(--label-color);font-size:var(--amplify-text-sm);margin-bottom:16px}\";\n\nvar AmplifyLabel =\n/** @class */\nfunction () {\n  function AmplifyLabel(hostRef) {\n    registerInstance(this, hostRef);\n  }\n\n  AmplifyLabel.prototype.render = function () {\n    return h(\"label\", {\n      class: \"label\",\n      htmlFor: this.htmlFor\n    }, h(\"slot\", null));\n  };\n\n  return AmplifyLabel;\n}();\n\nAmplifyLabel.style = amplifyLabelCss;\nexport { AmplifyFormField as amplify_form_field, AmplifyHint as amplify_hint, AmplifyInput as amplify_input, AmplifyLabel as amplify_label };"],"sourceRoot":""}